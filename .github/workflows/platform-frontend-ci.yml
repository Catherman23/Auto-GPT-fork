name: AutoGPT Platform - Frontend CI

on:
  push:
    branches: [master, dev]
    paths:
      - ".github/workflows/platform-frontend-ci.yml"
      - "autogpt_platform/frontend/**"
  pull_request:
    paths:
      - ".github/workflows/platform-frontend-ci.yml"
      - "autogpt_platform/frontend/**"
  merge_group:

defaults:
  run:
    shell: bash
    working-directory: autogpt_platform/frontend

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Cache pnpm
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: pnpm-${{ runner.os }}-${{ hashFiles('autogpt_platform/frontend/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: Install pnpm
        run: |
          corepack enable
          corepack prepare pnpm --activate
          pnpm config set store-dir ~/.pnpm-store

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run lint
        run: pnpm lint

  type-check:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Cache pnpm
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: pnpm-${{ runner.os }}-${{ hashFiles('autogpt_platform/frontend/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: Install pnpm
        run: |
          corepack enable
          corepack prepare pnpm --activate
          pnpm config set store-dir ~/.pnpm-store

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate API client
        run: pnpm generate:api-client

      - name: Run tsc check
        run: pnpm type-check

  build:
    runs-on: ubuntu-latest
    outputs:
      build-cache-key: ${{ steps.build-cache.outputs.cache-primary-key }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Cache pnpm
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: pnpm-${{ runner.os }}-${{ hashFiles('autogpt_platform/frontend/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: Install pnpm
        run: |
          corepack enable
          corepack prepare pnpm --activate
          pnpm config set store-dir ~/.pnpm-store

      - name: Copy default supabase .env
        run: |
          cp ../.env.example ../.env

      - name: Copy backend .env
        run: |
          cp ../backend/.env.example ../backend/.env

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup .env
        run: cp .env.example .env

      - name: Build frontend (production)
        run: pnpm build
        env:
          NEXT_PUBLIC_PW_TEST: "true"

      - name: Cache build artifacts
        id: build-cache
        uses: actions/cache/save@v4
        with:
          path: |
            .next
            node_modules
            .next/cache
          key: build-${{ runner.os }}-${{ github.sha }}-${{ hashFiles('autogpt_platform/frontend/pnpm-lock.yaml') }}

  test:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, webkit]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Cache pnpm
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: pnpm-${{ runner.os }}-${{ hashFiles('autogpt_platform/frontend/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: Install pnpm
        run: |
          corepack enable
          corepack prepare pnpm --activate
          pnpm config set store-dir ~/.pnpm-store

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          large-packages: false # slow
          docker-images: false # limited benefit

      - name: Copy default supabase .env
        run: |
          cp ../.env.example ../.env

      - name: Copy backend .env
        run: |
          cp ../backend/.env.example ../backend/.env

      - name: Run docker compose
        run: |
          docker compose -f ../docker-compose.yml up -d

      - name: Restore build artifacts
        id: restore-build-artifacts
        uses: actions/cache/restore@v4
        with:
          path: |
            .next
            node_modules
            .next/cache
          key: build-${{ runner.os }}-${{ github.sha }}-${{ hashFiles('autogpt_platform/frontend/pnpm-lock.yaml') }}
          restore-keys: |
            build-${{ runner.os }}-

      - name: Install dependencies (fallback)
        if: steps.restore-build-artifacts.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Setup .env
        run: cp .env.example .env

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ runner.os }}-${{ matrix.browser }}-${{ hashFiles('autogpt_platform/frontend/pnpm-lock.yaml') }}
          restore-keys: |
            playwright-browsers-${{ runner.os }}-${{ matrix.browser }}-
            playwright-browsers-${{ runner.os }}-

      - name: Install Browser '${{ matrix.browser }}'
        run: pnpm playwright install --with-deps ${{ matrix.browser }}

      - name: Run Playwright tests
        run: pnpm test:ci --project=${{ matrix.browser }}
        env:
          NEXT_PUBLIC_PW_TEST: "true"

      - name: Print Final Docker Compose logs
        if: always()
        run: docker compose -f ../docker-compose.yml logs

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 30
